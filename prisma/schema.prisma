// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String
  lastName String?

  token String?

  playlists     Playlist[]
  track         Track[]
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Track {
  id       Int    @id @default(autoincrement())
  title    String
  artist   String
  duration Int // Длительность трека в секундах

  Url      String?
  UrlImage String?

  releaseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId Int?

  playlists Playlist[] @relation("PlaylistTracks")

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tracks Track[]
}

model Playlist {
  id        Int      @id @default(autoincrement())
  name      String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id])
  tracks Track[] @relation("PlaylistTracks")
}

model Subscription {
  id        Int       @id @default(autoincrement())
  userId    Int
  startDate DateTime? @default(now())
  endDate   DateTime?

  user User @relation(fields: [userId], references: [id])
}
